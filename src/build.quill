
mod quill::cli::build

use quill::cli::(log, pkg, files, files::catch_os_while, config::*)
use os::(fs, fs::path, Process)
use terminal::io::*

enum Mode(
    Debug,
    Release
)

pub fun Mode::parse(text: String) -> Mode {
    match text {
        "debug" { return Mode::Debug }
        "release" { return Mode::Release }
        _ {
            log::error("'_' is not a valid build mode" |> fmt(text))
            return panic("unreachable")
        }
    }
}

pub val OUT_DIR: String = ".quill"
pub val CONFIG_FILE_LOC: String = "quill.pkg.json"
pub val QUILL_SRC_DIR: String = "src"
pub val C_SRC_DIR: String = "src-c"

fun mangle_url(url: String) -> String = url 
    |> chars()
    |> map[String, String](|ch| {
        val c: Int = String::as_code(ch)
        if String::as_code("0") <= c && c <= String::as_code("9") { return ch }
        if String::as_code("a") <= c && c <= String::as_code("z") { return ch }
        if String::as_code("A") <= c && c <= String::as_code("Z") { return ch }
        if ch == "-" { return ch }
        return "_"
    })
    |> join("")

fun clone_dependency(url: String) -> String {
    val dest: String = OUT_DIR |> path::join(mangle_url(url))
    if fs::is_dir(dest) { return dest }
    log::cloning(url)
    val args: List[String] = List::of("clone", "--depth=1", url, dest)
    val cloning = Process::spawn(git_path(), args)
        |> catch_os_while[mut Process]("cloning '_'" |> fmt(url))
    val clone_res: Int = cloning |> wait()
    if clone_res != 0 {
        val cloning_out: String = cloning |> read_stdout()
            |> concat(cloning |> read_stderr())
        log::error_while("cloning '_'" |> fmt(url), cloning_out)
    }
    log::cloned(url)
    return dest
}

// Collects all the dependencies (recursively) of the given package
fun collect_dependencies(
    path: String, config: pkg::Config, 
    out: mut List[Pair[pkg::Config, String]]
) {
    for dep: config.dependencies |> values() {
        mut dep_path: String = ""
        if dep |> starts_with("https://") {
            dep_path = clone_dependency(dep)
        } else {
            val og_cwd: String = path::get_cwd()
            path::set_cwd(path) |> unwrap()
            dep_path = path::canonicalize(dep)
                |> catch_os_while[String](
                    "getting dependency '_' of '_'" |> fmt(dep, config.name)
                )
            path::set_cwd(og_cwd) |> unwrap()
        }
        val dep_config_path: String = path::join(dep_path, CONFIG_FILE_LOC)
        val dep_config_text: String = fs::read_file(dep_config_path)
            |> catch_os_while[String]("reading '_'" |> fmt(dep_config_path))
        val dep_config = pkg::Config::parse(dep_config_text, dep_config_path)
        if !pkg::Backend::may_depend_on(config.backend, dep_config.backend) {
            "'_' specifies '_' as its backend, meaning it cannot depend on the '_'-package with backend '_'!"
                |> fmt(
                    config.name, pkg::Backend::as_string(config.backend),
                    dep_config.name, pkg::Backend::as_string(dep_config.backend)
                )
                |> log::error()
        }
        out |> push(Pair(dep_config, dep_path))
        collect_dependencies(dep_path, dep_config, out)
    }
}

pub fun build(config: pkg::Config, mode: Mode, main: List[String]) {
    if !fs::is_dir(OUT_DIR) {
        fs::create_dir(OUT_DIR)
            |> catch_os_while[Unit]("creating output directory")
    }
    val packages: mut List[Pair[pkg::Config, String]] = List::empty()
    packages |> push(Pair(config, "."))
    collect_dependencies(".", config, packages)
    log::compiling(config.name)
    val quill_out: mut Set[String] = Set::empty()
    compile_quill(
        packages, main, config.backend, OUT_DIR, config.name, quill_out
    )
    match config.backend {
        C { compile_c(packages, quill_out, mode, OUT_DIR, config.name) }
        Js {}
        Any { return panic("unreachable") }
    }
    log::compiled(config.name)
}

pub fun bundle(config: pkg::Config, main: List[String]) {
    if !fs::is_dir(OUT_DIR) {
        fs::create_dir(OUT_DIR)
            |> catch_os_while[Unit]("creating output directory")
    }
    val packages: mut List[Pair[pkg::Config, String]] = List::empty()
    packages |> push(Pair(config, "."))
    collect_dependencies(".", config, packages)
    log::compiling(config.name)
    val quill_out: mut Set[String] = Set::empty()
    compile_quill(
        packages, main, config.backend, OUT_DIR, config.name, quill_out
    )
    match config.backend {
        C { bundle_c(packages, quill_out, OUT_DIR, config.name) }
        _ { log::error("'bundle' is not supported for this backend!") }
    }
    log::compiled(config.name)
}

use quill::(
    Message,
    lexer, token::Token,
    parser::(Parser, parse_file), ast::UntypedNode,
    types::(SymbolTable, SymbolInstance, PreparedInstance, CheckedInstance),
    codegen
)
use conc::(Mutex, Thread)

val CHECKER_THREAD_COUNT: Int = 10

fun compile_quill(
    packages: mut List[Pair[pkg::Config, String]], 
    main: List[String],
    backend: pkg::Backend, 
    out_dir: String, 
    name: String,
    generated: mut Set[String]
) {
    val file_paths: mut Set[String] = Set::empty()
    for package: packages |> values() {
        files::read_dir_rec(
            path::join(package.second, QUILL_SRC_DIR), file_paths
        )
    }
    val sources: Map[String, String] = file_paths
        |> values()
        |> filter(|path| path |> ends_with(".quill"))
        |> map(|path| Pair(path, fs::read_file(path) |> unwrap()))
        |> Map::collect()
    val unl_messages: mut List[Message] = List::empty()
    // parse all source files
    val nodes: List[UntypedNode] = sources
        |> entries()
        |> map[Pair[String, String], List[UntypedNode]](|s| {
            val tokens: mut Stream[Token]
                = lexer::tokenize(s.first, s.second, unl_messages)
            return Parser::from(tokens, unl_messages) |> parse_file()
        })
        |> reduce(List::concat)
        |> unwrap_or_else(List::empty)
    // build a symbol table and check all symbols
    val unl_table = SymbolTable::from(nodes, unl_messages)
    val worker_table: mut Mutex[mut SymbolTable] 
        = Mutex::new(unl_table)
    val worker_queue: mut Mutex[mut List[SymbolInstance]]
        = Mutex::new(unl_table |> base_instances())
    val worker_msgs: mut Mutex[mut List[Message]]
        = Mutex::new(unl_messages)
    val worker: Fun() = || {
        val check_symbol: Fun(PreparedInstance) = |p_i| {
            val deps: mut List[SymbolInstance] = List::empty()
            val msgs: mut List[Message] = List::empty()
            val ch_i: CheckedInstance = unl_table 
                |> check_prepared_symbol(p_i, deps, msgs)
            worker_table |> take(|t| {
                t.value |> register_checked_symbol(ch_i)
                worker_queue |> take(|q| {
                    deps |> values()
                        |> filter(|d| !(t.value |> has_instance(d)))
                        |> for_each(|d| { q.value |> push(d) })
                })
            })
            worker_msgs |> take(|m| {
                msgs |> values() |> for_each(|msg| { m.value |> push(msg) })
            })
        }
        val prepare_symbol: Fun(SymbolInstance) = |i| {
            val prep_i: Option[PreparedInstance]
                = worker_table |> compute(|t| t |> prepare_check_symbol(i))
            match prep_i {
                Some(p_i) { check_symbol(p_i) }
                None {}
            }
        }
        while true {
            val next: Option[SymbolInstance] 
                = worker_queue |> compute(|q| q |> pop())
            match next {
                None { break }
                Some(i) { prepare_symbol(i) } 
            }
        }
    }
    val workers: List[Thread] = range(0, CHECKER_THREAD_COUNT)
        |> map(|_| Thread::spawn(worker))
        |> List::collect()
    workers |> values() |> for_each(Thread::join)
    // report messages and exit if has any
    if unl_messages |> values() |> any(Message::is_error) {
        val errors_displ = unl_messages |> values() 
            |> map[Message, String](|m| m |> display(sources, true))
            |> join("\n")
        log::error_while("compiling", errors_displ)
    }
    // emit code
    val report_errors: Fun() = || {
        val errors_displ = unl_messages |> values() 
            |> map[Message, String](
                |m| m |> display(sources, true) |> concat("\n")
            )
            |> join("\n")
        if unl_messages |> values() |> any(Message::is_error) {
            log::error_while("compiling", errors_displ)
        } else {
            print(errors_displ)
        }
    }
    match backend {
        C {
            val output: String = codegen::c::emit(unl_table, main, unl_messages)
            report_errors()
            val out_path: String = path::join(out_dir, name |> concat(".c"))
            output |> fs::write_file(out_path) |> unwrap()
            generated |> add(out_path)
        }
        Js {
            val output: String = codegen::js::emit(unl_table, main, unl_messages)
            report_errors()
            val out_path: String = path::join(out_dir, name |> concat(".js"))
            output |> fs::write_file(out_path) |> unwrap()
            generated |> add(out_path)
        }
        Any {
            "Cannot build an application for backend '_'!" 
                |> fmt(pkg::Backend::as_string(backend))
                |> log::error()
        }
    }
}

fun collect_c_files(
    packages: mut List[Pair[pkg::Config, String]],
    c_files: mut Set[String],
    include_dirs: mut List[String]
) {
    for package: packages |> values() {
        val src_dir: String = path::join(package.second, C_SRC_DIR)
        files::read_dir_rec(src_dir, c_files)
        val include_dir: String = path::join(src_dir, "include")
        if fs::is_dir(include_dir) {
            include_dirs |> push(include_dir)
        }
    }
}

fun compile_c(
    packages: mut List[Pair[pkg::Config, String]],
    c_files: mut Set[String], 
    mode: Mode,
    out_dir: String, 
    name: String
) {
    val include_dirs: mut List[String] = List::empty()
    collect_c_files(packages, c_files, include_dirs)
    val args: mut List[String] = List::empty()
    for file: c_files |> values() {
        if !(file |> ends_with(".c")) { continue }
        args |> push(file)
    }
    for include_dir: include_dirs |> values() {
        args |> push("-I")
        args |> push(include_dir)
    }
    args |> push("-lm")
    match mode {
        Debug {
            args |> push("-O0")
            args |> push("-g")
        }
        Release {
            args |> push("-O3")
            if c_use_lto() {
                args |> push("-flto=4")
            }
        }
    }
    args |> append(cc_flags())
    args |> push("-o")
    args |> push(path::join(out_dir, name))
    val comp = Process::spawn(cc_path(), args)
        |> catch_os_while[mut Process]("invoking C compiler")
    val comp_res: Int = comp |> wait()
    if comp_res != 0 {
        val output: String = comp |> read_stdout()
            |> concat(comp |> read_stderr())
        log::error_while("compiling C code", output)
    }
}

fun replace_c_includes(source: String, headers: Map[String, String]) -> String {
    mut r: String = source
    for header: headers |> entries() {
        val include: String = "#include <" 
            |> concat(header.first) |> concat(">")
        val occurances: List[String] = r 
            |> split(include) |> List::collect()
        if (occurances |> length()) <= 1 { continue }
        val repl: String = header.second |> replace_c_includes(headers)
        r = occurances |> values() |> join(repl)
    }
    return r
}

fun bundle_c(
    packages: mut List[Pair[pkg::Config, String]],
    c_files: mut Set[String], 
    out_dir: String, 
    name: String
) {
    val include_dirs: mut List[String] = List::empty()
    collect_c_files(packages, c_files, include_dirs)
    val included_headers: mut Map[String, String] = Map::empty()
    for dir: include_dirs |> values() {
        val og_cwd: String = path::get_cwd()
        path::set_cwd(dir)
        val paths: mut Set[String] = Set::empty()
        files::read_dir_rec(".", paths)
        for raw_path: paths |> values() {
            val path = raw_path 
                |> slice_from("." |> length()) 
                |> path::trim_begin()
            val content = fs::read_file(raw_path)
                |> unwrap()
            included_headers |> set(path, content)
        }
        path::set_cwd(og_cwd)
    }
    val bundled = StringBuilder::empty()
    for path: c_files |> values() {
        val content: String = fs::read_file(path) |> unwrap()
        bundled |> push(content |> replace_c_includes(included_headers))
    }
    val out_path: String = path::join(out_dir, name |> concat("_bundled.c"))
    bundled |> as_string() |> fs::write_file(out_path)
}